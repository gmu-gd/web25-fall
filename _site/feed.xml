<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-12T15:40:18-04:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Making it Responsive</title><link href="http://localhost:4000/tutorials/t7/" rel="alternate" type="text/html" title="Making it Responsive" /><published>2025-08-06T00:00:00-04:00</published><updated>2025-08-06T00:00:00-04:00</updated><id>http://localhost:4000/tutorials/t7</id><content type="html" xml:base="http://localhost:4000/tutorials/t7/"><![CDATA[<p>This tutorial will go through the process of making a site responsive. It will use your main <strong>index.html</strong> file and its associated CSS file to make your homepage go from two columns on larger screens to one column on smaller screens.</p>

<h3 id="step-1-open-your-repository-and-files"><span id="step1">Step 1: Open Your Repository and Files</span></h3>
<p>Open your repository in Atom and then open up your main <strong>index.html</strong> file and CSS file associated with it by double clicking on the files in the tree view.</p>

<p>Really the main focus here is the CSS file but we might want to reference what is happening in the HTML file so it is worth having them both open. Your HTML file should be set up similarly to the screenshot below.</p>

<p><img src="/assets/img/t7/step1.png" alt="HTML file" title="Step 1" /></p>

<h3 id="step-2-write-the-media-query"><span id="step2">Step 2: Write the Media Query</span></h3>
<p>The first part of making a responsive site is writing the media query where we will add our responsive styles. Once we have the media query written we can start to add styles that will only happen at a certain range of screen sizes. In this case we designed the desktop version so we want the media query to happen when the screen gets smaller.</p>

<p>Open up your site in a browser and start making the window smaller. There will come a point where the two columns on the homepage start to get too close together, start touching, or the columns are too narrow. Once you find that point, get the width of your browser by going to a site like <a href="http://howbigismybrowser.com/">howbigismybrowser.com</a>. Look at what the width is and remember that number for when you write your media query. For my site it is around 900px.</p>

<p><img src="/assets/img/t7/step2-1.png" alt="900px wide window is where the site starts to get messy" title="Step 2" /></p>

<p>You are going to write the media query in your CSS and you need to add it after all your main CSS styles. So scroll to the bottom of your CSS file and write <code class="language-plaintext highlighter-rouge">@media screen and (max-width: 900px) { }</code> with the number after <code class="language-plaintext highlighter-rouge">max-width</code> the number you came up with above.</p>

<p><img src="/assets/img/t7/step2-2.png" alt="adding media query" title="Step 2" /></p>

<p>Make sure when you add this you do not have a semicolon after the value for <code class="language-plaintext highlighter-rouge">max-width</code> and you include the curly brackets with an empty line between them like in the screenshot above.</p>

<h3 id="step-3-from-two-columns-to-one"><span id="step3">Step 3: From Two Columns to One</span></h3>

<p>Now that the media query is there you can start to write some styles for what happens when your site is viewed at a width of below whatever number you used. So you are writing styles to override your base styles when the screen is between 0px wide and your <code class="language-plaintext highlighter-rouge">max-width</code> value wide.</p>

<p>Let’s start with something easy to make sure your media query is written correctly.</p>

<h4 id="step-3a-check-if-the-media-query-works">Step 3a: Check if the Media Query Works</h4>

<p>Inside the media query write a style to change the background color of the <code class="language-plaintext highlighter-rouge">body</code> to something different. Make sure when you start writing the selector you are indented one level because all of these style rules go inside the media query. I changed the background color for my <code class="language-plaintext highlighter-rouge">body</code> to a light grey.</p>

<p><img src="/assets/img/t7/step3a1.png" alt="changing the baackground color in the media query" title="Step 3a" /></p>

<p><img src="/assets/img/t7/step3a2.png" alt="result of CSS at below 900px wide on the page" title="Step 3a" /></p>

<p>If your change doesn’t happen go back through step two and make sure you are writing your media query at the bottom of the CSS file and that you don’t have a semicolon after the value for <code class="language-plaintext highlighter-rouge">max-width</code>.</p>

<p>If your background color changes, carry on.</p>

<h4 id="step-3b-adding-style-rules-to-the-media-query">Step 3b: Adding Style Rules to the Media Query</h4>

<p>The main thing we want to do with this page is to go from two columns to one column. At a certain point two columns isn’t practical on smaller screens so instead of having two super skinny columns we want to make one column for a better reading experience on the smaller screen.</p>

<p>To do that we need to override some of our column styles from the main CSS. If you scroll up in your CSS to look at the styles you have that control your two columns you should see something similar to this:</p>

<p><img src="/assets/img/t7/step3b1.png" alt="style rule for the columns" title="Step 3b" /></p>

<p>Copy and paste that whole style rule down into your media query and delete the <code class="language-plaintext highlighter-rouge">body</code> style rule. Again making sure everything is properly indented.</p>

<p><img src="/assets/img/t7/step3b2.png" alt="style rule for the columns in the media query" title="Step 3b" /></p>

<h4 id="step-3c-deciding-what-needs-to-change">Step 3c: Deciding What Needs to Change</h4>

<p>We don’t need all of these declarations in this rule so let’s decide what we want to change here. The main property that is allowing our two columns to work is the <span class="spoiler">width</span> property. You might have answered the <span class="spoiler">float</span> property which is sort of true but that property won’t do anything unless the other property allows it to. So since you really only need to work with the <code class="language-plaintext highlighter-rouge">width</code> property you can delete the other two declarations because you don’t need to change anything about them. Remember, the only styles in a media query are ones you are overriding/changing from your main styles or that are entirely new styles.</p>

<p><img src="/assets/img/t7/step3c.png" alt="only the width declaration remains in the media query" title="Step 3c" /></p>

<h4 id="step-3d-changing-the-value">Step 3d: Changing the Value</h4>

<p>Now that only the <code class="language-plaintext highlighter-rouge">width</code> property remains, what does the value need to be to make the change we want? If 50% is giving the space necessary to float two columns next to each other and now we only want one column, the value for the <code class="language-plaintext highlighter-rouge">width</code> should be changed to <span class="spoiler">100%</span>. This way the column takes up the entire width of its container (the <code class="language-plaintext highlighter-rouge">main</code> element) and nothing can float next to it because there is no room.</p>

<p><img src="/assets/img/t7/step3d1.png" alt="width declaration to 100% in media query" title="Step 3d" /></p>

<p><img src="/assets/img/t7/step3d2.png" alt="page now displaying as a single column" title="Step 3d" /></p>

<h4 id="step-3e-adding-new-styles">Step 3e: Adding New Styles</h4>

<p>The final thing we want to do here is add any new styles that we might need to make the page look the best it can. In the screenshot above the word Project is too close to the last item in the list of exercises. That is an easy fix by adding a <span class="spoiler">margin</span> to the columns.</p>

<p>In the style rule for the columns in the media query, add a margin on the bottom to separate the two stacked columns. In this case I am going to use <code class="language-plaintext highlighter-rouge">margin-bottom: 50px;</code> because that is the only margin I want to change. If this has other margins on it in my main styles and I write <code class="language-plaintext highlighter-rouge">margin: 0 0 50px 0;</code> it is going to override any existing margins on the top, left, and right and set them to zero. Not something that I probably want to happen.</p>

<p><img src="/assets/img/t7/step3e1.png" alt="adding a bottom margin into the media query" title="Step 3e" /></p>

<p><img src="/assets/img/t7/step3e2.png" alt="columns having more vertical separation" title="Step 3e" /></p>

<h3 id="step-4-adjust-other-styles"><span id="step4">Step 4: Adjust Other Styles</span></h3>

<p>Now that we have gone through the basic setup of making a page responsive, we can make other changes that need to happen when your page gets narrower. For my page I’m going increase the width of the <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">header</code> elements so there is more room for the type. I might decrease the size of the <code class="language-plaintext highlighter-rouge">h1</code> element so it isn’t quite so big. I could go through and change a lot more if I wanted to but the goal here is to make the existing designs look their best on a smaller screen, not redesign the site.</p>

<p>And again, I’m only using using the properties I want to change or add so I don’t need to include <code class="language-plaintext highlighter-rouge">margin</code>, <code class="language-plaintext highlighter-rouge">padding</code>, or the <code class="language-plaintext highlighter-rouge">font-family</code> in the media query because I’m not making any changes to them. I also didn’t have to make any adjustments to the HTML file just reference it to make sure I’m changing the correct elements or classes.</p>

<p><img src="/assets/img/t7/step4-1.png" alt="adjusting a few more styles in the media query" title="Step 4" /></p>

<p><img src="/assets/img/t7/step4-2.png" alt="width main width, smaller type on live page" title="Step 4" /></p>]]></content><author><name>Michael McDermott</name></author><category term="tutorials" /><summary type="html"><![CDATA[How to make sites responsive with CSS.]]></summary></entry><entry><title type="html">Making Columns</title><link href="http://localhost:4000/tutorials/t6/" rel="alternate" type="text/html" title="Making Columns" /><published>2025-08-05T00:00:00-04:00</published><updated>2025-08-05T00:00:00-04:00</updated><id>http://localhost:4000/tutorials/t6</id><content type="html" xml:base="http://localhost:4000/tutorials/t6/"><![CDATA[<p>This tutorial will go through the process of setting up a two column layout with floats and divs using your main <strong>index.html</strong> file and its associated CSS file to work with.</p>

<h3 id="step-1-open-your-repository-and-files"><span id="step1">Step 1: Open Your Repository and Files</span></h3>
<p>Open your repository in Atom and then open up your main <strong>index.html</strong> file and CSS file associated with it by double clicking on the files in the tree view.</p>

<p>Once both are open you can view them side by side by dragging the the tab with your CSS file to the right until the right column is highlighted. Once it is highlighted you can let go and you should be able to see both files as a split screen in Atom. If you don’t want to work this way that’s okay.</p>

<p><img src="/assets/img/t6/step1.png" alt="two column view in Atom" title="Step 1" /></p>

<p>The HTML file in the screenshot should closely resemble your HTML file but the CSS file might look different than yours which is okay.</p>

<h3 id="step-2-section-off-the-html-file"><span id="step2">Step 2: Section off the HTML file</span></h3>
<p>We are going to work in the HTML file first and get all of our content structured in a way that will be easy to modify with CSS later. The goal of this step is to wrap content in the HTML file in semantic elements (<code class="language-plaintext highlighter-rouge">header</code>, <code class="language-plaintext highlighter-rouge">main</code>, etc.) or <code class="language-plaintext highlighter-rouge">div</code> elements. So let’s start with the semantic elements by adding a <code class="language-plaintext highlighter-rouge">header</code> element and a <code class="language-plaintext highlighter-rouge">main</code> element to the page.</p>

<h4 id="step-2a-adding-a-header-element">Step 2a: Adding a Header Element</h4>

<p>The <code class="language-plaintext highlighter-rouge">header</code> element should contain content that would go in a … header (no better way to explain it 🤦). The main heading on this page seems like good content to go there. Wrap the <code class="language-plaintext highlighter-rouge">h1</code> element in a <code class="language-plaintext highlighter-rouge">header</code> element. This means adding an opening tag for the <code class="language-plaintext highlighter-rouge">header</code> on a new line above the <code class="language-plaintext highlighter-rouge">h1</code> element, indenting the <code class="language-plaintext highlighter-rouge">h1</code> element one level because now it is a child of the <code class="language-plaintext highlighter-rouge">header</code> element, and then adding the closing tag for the <code class="language-plaintext highlighter-rouge">header</code> on a new line below the <code class="language-plaintext highlighter-rouge">h1</code> element. Should look something like the below.</p>

<p><img src="/assets/img/t6/step2a.png" alt="adding header element to html file" title="Step 2a" /></p>

<h4 id="step-2b-adding-a-main-element">Step 2b: Adding a Main Element</h4>

<p>Next we want to do a similar process with the other content on the page (which in this example is the <code class="language-plaintext highlighter-rouge">ul</code> and all the content it contains). This time though, instead of the <code class="language-plaintext highlighter-rouge">header</code> element we want to use the <code class="language-plaintext highlighter-rouge">main</code> element. The <code class="language-plaintext highlighter-rouge">main</code> element represents the dominant content of the <code class="language-plaintext highlighter-rouge">body</code> element, which in this case is the list of links.</p>

<p>So now wrap the rest of the content in your body in the <code class="language-plaintext highlighter-rouge">main</code> element. Make sure you have an opening tag before all the content you want to contain, a closing tag after all the content, and that the content inside the <code class="language-plaintext highlighter-rouge">main</code> element is indented appropriately.</p>

<p><img src="/assets/img/t6/step2b.png" alt="adding main element to html file" title="Step 2b" /></p>

<h4 id="step-2c-splitting-the-list">Step 2c: Splitting the List</h4>

<p>Next we want to split the unordered list into two unordered lists. We want to do this because one column of this page is going to be exercise links and the other column is going to be project links.</p>

<p>The unordered list should be split up with a list for exercises and a list for the project. To do that just go to where the last exercise is and close the <code class="language-plaintext highlighter-rouge">ul</code> after it and then open another one after that. This is lines 23 and 24 in the screenshot below.</p>

<p><img src="/assets/img/t6/step2c.png" alt="splitting the list into two lists" title="Step 2c" /></p>

<h4 id="step-2d-adding-two-div-elements">Step 2d: Adding Two Div Elements</h4>

<p>Finally we want to wrap each list in its own <code class="language-plaintext highlighter-rouge">div</code> element so we can add styles to make two columns instead of the single column that it is right now.</p>

<p>Before each <code class="language-plaintext highlighter-rouge">ul</code> add an opening <code class="language-plaintext highlighter-rouge">div</code> tag and after each <code class="language-plaintext highlighter-rouge">ul</code> add a closing div tag. Don’t forget to indent contained elements one level each.</p>

<p><img src="/assets/img/t6/step2d1.png" alt="wrapping each list in a div element" title="Step 2d" /></p>

<p>The last step here is adding a class to the <code class="language-plaintext highlighter-rouge">div</code> elements. Since these are two equal columns and they are probably going to have the same styles we can give them both the same class name. It could be whatever you want but I’m going to use “col” to keep it short and informative.</p>

<p><img src="/assets/img/t6/step2d2.png" alt="giving the div elements the col class" title="Step 2d" /></p>

<p>Now you should have a nicely sectioned and formatted file that has a <code class="language-plaintext highlighter-rouge">header</code>, a <code class="language-plaintext highlighter-rouge">main</code>, 2 <code class="language-plaintext highlighter-rouge">ul</code>’s, and 2 <code class="language-plaintext highlighter-rouge">div</code>’s each with the “col” class. I’m also going to add two heading elements in each column to show which column is which. Not something you have to do but helpful for someone who might be unfamiliar with the site.</p>

<p><img src="/assets/img/t6/step2d3.png" alt="adding h2 elements above each list" title="Step 2d" /></p>

<p>Now if you save it and preview the file you will see that nothing really changed with the exception of the list now being two lists.</p>

<p><img src="/assets/img/t6/step2d4.png" alt="preview of page in browser" title="Step 2d" /></p>

<h3 id="step-3-adding-styles"><span id="step3">Step 3: Adding Styles</span></h3>

<p>The page is structured how it needs to be in order to allow for two columns to work but we still need to add the CSS rules that make the site display like we want. The wireframe below illustrates the layout we are going for. The <code class="language-plaintext highlighter-rouge">header</code> is the blue box with the <code class="language-plaintext highlighter-rouge">h1</code> type in there. The <code class="language-plaintext highlighter-rouge">main</code> is the yellow box with the two red <code class="language-plaintext highlighter-rouge">div</code>’s in there each containing one of the lists. We don’t want them stretching across the page so we are going to give them some widths to make the content narrower and add some margins to make that width center on the page.</p>

<p><img src="/assets/img/t6/step3.png" alt="wireframe of what the site should look like" title="Step 3" /></p>

<h4 id="step-3a-header-styles">Step 3a: Header Styles</h4>

<p>Let’s start at the top with getting the <code class="language-plaintext highlighter-rouge">header</code> element into its place. I added some comments to my CSS file to note where my general, layout, type, and link styles are to help keep me organized. The styles we are getting ready to add are going to go under my layout styles comment.</p>

<p>The first thing we want to do when we want to style something is write the correct selector. In this case I want to style the <code class="language-plaintext highlighter-rouge">header</code> element so I’ll use an element selector and type <code class="language-plaintext highlighter-rouge">header { }</code> on a new line. In between those two curly brackets I’m going to add an empty line so the final result will look like the screenshot below.</p>

<p><img src="/assets/img/t6/step3a1.png" alt="header style rule set up" title="Step 3a" /></p>

<p>Now that the basic syntax is there let’s start writing some declarations. I know I want to change the width and make sure it is centered on the page so I’m going to add the <code class="language-plaintext highlighter-rouge">width</code> property and the <code class="language-plaintext highlighter-rouge">margin</code> property. I’m also going to add a <code class="language-plaintext highlighter-rouge">background-color</code> to this so we can see what is happening and remove it later. The value for the width is up to you. I’m going to start with <code class="language-plaintext highlighter-rouge">75vw</code> (vw stands for viewport widths so 75vw equals 75% of the width of the window) for the <code class="language-plaintext highlighter-rouge">width</code> and add a blue background color to keep true to the wireframe. For the margins I want the top and bottom to be 25px and I want it to be centered on the page and I want to write this all as one declaration. There is an easy way to get the element to center on the page once I have given it a width. Do you remember what it is and how to write the margins as one declaration? Check your answer here <span class="spoiler">margin: 25px auto</span>.</p>

<p><img src="/assets/img/t6/step3a2.png" alt="width, background color and margin declarations for header" title="Step 3a" /></p>

<p>Save the CSS file (and make sure the HTML file is saved) and preview the HTML file. Mine looks something like this.</p>

<p><img src="/assets/img/t6/step3a3.png" alt="preview of HTML file" title="Step 3a" /></p>

<h4 id="step-3b-main-styles">Step 3b: Main Styles</h4>

<p>We are going to repeat that same process for the <code class="language-plaintext highlighter-rouge">main</code> element. The only change is instead of a blue background we are going to give it a yellow background.</p>

<p>So your code should look something like this.</p>

<p><img src="/assets/img/t6/step3b1.png" alt="style rules for main element" title="Step 3b" /></p>

<p>And your site should look something like this.</p>

<p><img src="/assets/img/t6/step3b2.png" alt="preview of HTML file" title="Step 3b" /></p>

<h4 id="3c-col-styles">3c: .col Styles</h4>

<p>The final step is getting the columns to show up side by side. Since we have a class for our <code class="language-plaintext highlighter-rouge">div</code> elements we are going to use that as our selector instead of the element selector <code class="language-plaintext highlighter-rouge">div</code>. This is because the class selector is more specific which in this case isn’t a big deal because the only two <code class="language-plaintext highlighter-rouge">div</code> elements on the page have the “col” class but you can imagine if there were more <code class="language-plaintext highlighter-rouge">div</code> elements that had other classes we couldn’t just use the <code class="language-plaintext highlighter-rouge">div</code> element selector to style them.</p>

<p>So in the CSS file we want to use the class selector <code class="language-plaintext highlighter-rouge">.col</code>.</p>

<p><img src="/assets/img/t6/step3c1.png" alt=".col style rule set up" title="Step 3c" /></p>

<p>The first thing we need to do is add a <code class="language-plaintext highlighter-rouge">width</code>. Now there is an easy way to make these half as wide as there parent elements. Do you know what it is? <span class="spoiler">width: 50%;</span> is correct! This works well for us because percentages are based on the width of the parent element. So instead of trying to figure out half of <code class="language-plaintext highlighter-rouge">75vw</code> we can just write <code class="language-plaintext highlighter-rouge">50%</code> and the computer does the work for us. We are also going to add a <code class="language-plaintext highlighter-rouge">background-color</code> here so we can see what is going on.</p>

<p><img src="/assets/img/t6/step3c2.png" alt=".col style rule set up" title="Step 3c" /></p>

<p>If you preview the page it should look something like the below. The columns are half the width of the <code class="language-plaintext highlighter-rouge">main</code> element but they aren’t sitting next to each other yet.</p>

<p><img src="/assets/img/t6/step3c3.png" alt="preview of page" title="Step 3c" /></p>

<p>To get these to sit next to each other we need to add a new declaration. Do you know what it is? If you said <span class="spoiler">float: left;</span> you are correct.</p>

<p><img src="/assets/img/t6/step3c4.png" alt="float declaration added to .col" title="Step 3c" /></p>

<p><img src="/assets/img/t6/step3c5.png" alt="preview of page" title="Step 3c" /></p>

<p>But if you notice on the previewed page the yellow background for the <code class="language-plaintext highlighter-rouge">main</code> element disappeared. Remember from the Floats lecture that when you float objects they get removed from the normal flow so the containing element does not think any floated elements are contained inside it so the height changes to the height of any none floated elements it is containing (which in this case the height is 0 because there are no elements that aren’t floated inside the <code class="language-plaintext highlighter-rouge">main</code> element). To fix this we need to add one more line of code to the <code class="language-plaintext highlighter-rouge">main</code> CSS styles. Once <span class="spoiler">display: flow-root;</span> gets added to the styles for the <code class="language-plaintext highlighter-rouge">main</code> element the yellow background comes back to the height of the longer red column.</p>

<p><img src="/assets/img/t6/step3c6.png" alt="display: flow-root; added to main" title="Step 3c" /></p>

<p><img src="/assets/img/t6/step3c7.png" alt="preview of page" title="Step 3c" /></p>

<p>After you remove the background colors you have reached the end. There is more we could do here as designers (and probably should do for practice). We could change the margins on the columns so that if the columns get too narrow the type won’t touch. If we added margins we would also have to account for that in the widths of the columns. We could add padding instead which doesn’t have to be accounted for in the width as long as you have the <code class="language-plaintext highlighter-rouge">box-sizing</code> set to <code class="language-plaintext highlighter-rouge">border-box</code> for the universal selector. That would push the content away from the edge of its box and fix the issue of type touching if the columns got too close. Some other things to make sure you are adding here are styles for your links, importing fonts from Google or Adobe, colors, sizes, all the styles to make the page look great.</p>

<p><img src="/assets/img/t6/step3c8.png" alt="preview of finished page" title="Step 3c" /></p>]]></content><author><name>Michael McDermott</name></author><category term="tutorials" /><summary type="html"><![CDATA[How to use floats and divs to add columns to your site.]]></summary></entry><entry><title type="html">Bringing in Fonts</title><link href="http://localhost:4000/tutorials/t5/" rel="alternate" type="text/html" title="Bringing in Fonts" /><published>2025-08-04T00:00:00-04:00</published><updated>2025-08-04T00:00:00-04:00</updated><id>http://localhost:4000/tutorials/t5</id><content type="html" xml:base="http://localhost:4000/tutorials/t5/"><![CDATA[<p>This tutorial will explain how to bring in fonts from <a href="https://fonts.google.com/">fonts.google.com</a> and <a href="https://fonts.adobe.com/">fonts.adobe.com</a>. This tutorial will use your main <strong>index.html</strong> file and its associated CSS file to bring in the fonts.</p>

<h3 id="step-1-open-your-repository-and-files"><span id="step1">Step 1: Open Your Repository and Files</span></h3>
<p>Open your repository in Atom and then open up your main <strong>index.html</strong> file and CSS file associated with it by double clicking on the files in the tree view.</p>

<p><img src="/assets/img/t5/step1a1.png" alt="repository opened in Atom" title="Step 1a" /></p>

<p>Once both are open you can view them side by side by dragging the the tab with your CSS file to the right until the right column is highlighted. Once it is highlighted you can let go and you should be able to see both files as a split screen in Atom. If you don’t want to work this way that’s okay.</p>

<p><img src="/assets/img/t5/step1a2.png" alt="two column view in Atom" title="Step 1a" /></p>

<p>In that screenshot you will notice that I have reset some of the default styles  that we talked about in The CSS Box Model lecture.</p>

<h3 id="step-2-choose-google-fonts"><span id="step2">Step 2: Choose Google Fonts</span></h3>
<p>Open up your browser and go to <a href="https://fonts.google.com/">fonts.google.com</a>.</p>

<p><img src="/assets/img/t5/step2.png" alt="fonts.google.com homepage" title="Step 2" /></p>

<h4 id="step-2a-select-a-font-family">Step 2a: Select a Font Family</h4>
<p>There are a lot of font families on Google Fonts. Take a minute to browse through and find one you want to use on your site. In the top right of each font family box there is some text that says “1 style” or “6 styles” or “variable”. Select a font family that has 2 or more styles and stay away from variable for the moment. Once you found the font family you want to use, click on it.</p>

<p><img src="/assets/img/t5/step2a.png" alt="a font family selected" title="Step 2a" /></p>

<h4 id="step-2b-select-styles">Step 2b: Select Styles</h4>
<p>On this screen you need to select the styles you are going to use. Try and select only the ones you plan on using. You don’t need to pick a font family that has 28 styles and then select all 28 because most likely you won’t be using all 28 styles. I typically try to get a Regular, Regular Italic, Bold, and Bold Italic as a starting point. Usually I will need at least those four but if you think you might need any extra select away.</p>

<p><img src="/assets/img/t5/step2b.png" alt="styles selected" title="Step 2b" /></p>

<h4 id="step-2c-get-code">Step 2c: Get Code</h4>
<p>After you have your styles selected you can click on the “View your selected families” icon in the top right. It has three squares and a plus sign and should have a red circle in the top right. A panel should slide on the screen that shows your selected family when you click on the icon.</p>

<p><img src="/assets/img/t5/step2c1.png" alt="a font family selected" title="Step 2c" /></p>

<p>Check to make sure the fonts you think should be there are there and then click on the “Embed” tab at the top of the panel. This will bring up the tab that has the code for you to link to the fonts from your HTML document and add the font family to your CSS.</p>

<p><img src="/assets/img/t5/step2c2.png" alt="embed tab of selected family panel" title="Step 2c" /></p>

<h4 id="step-2d-copy-link-and-paste-in-html-document">Step 2d: Copy Link and Paste in HTML Document</h4>
<p>Copy the first bit of code under the &lt;link&gt;. Once it is copied go back to Atom and paste it in your <strong>index.html</strong> file. Where should you paste it you might ask? It should go in the <span class="spoiler">head</span> of course! Paste it in there above the <code class="language-plaintext highlighter-rouge">link</code> element for your CSS file. Remember, the <code class="language-plaintext highlighter-rouge">head</code> contains information about the document itself and the <code class="language-plaintext highlighter-rouge">body</code> contains the content of the document.</p>

<p><img src="/assets/img/t5/step2d.png" alt="pasted link element in HTML" title="Step 2d" /></p>

<h4 id="step-2e-copy-css-and-paste-in-css-document">Step 2e: Copy CSS and Paste in CSS Document</h4>
<p>Copy the second bit of code from the Google Fonts embed panel under the “CSS rules to specify families”. Once it is copied go back to Atom and paste it in your CSS file. Where should you paste it you might ask? Well this time it could go a lot of places because it depends on what in your HTML file you want to use new fonts. In this case, everything is going to use these fonts so I’m going to add them to a style rule for the <code class="language-plaintext highlighter-rouge">body</code>. But if you just wanted your <code class="language-plaintext highlighter-rouge">h1</code> element to be the new font you could make a style rule for the <code class="language-plaintext highlighter-rouge">h1</code> element. Or if you wanted the <code class="language-plaintext highlighter-rouge">li</code> elements to be the new font you could make a style rule for the <code class="language-plaintext highlighter-rouge">li</code> element.</p>

<p><img src="/assets/img/t5/step2e.png" alt="pasted font-family in CSS" title="Step 2e" /></p>

<h3 id="step-3-save-and-preview"><span id="step3">Step 3: Save and Preview</span></h3>
<p>The last step is to check and see if everything worked. Make sure both your HTML and CSS files are saved and then preview your HTML file. Hopefully the font on the page should change to the new font you selected. If it doesn’t, go back and make sure you pasted the whole <code class="language-plaintext highlighter-rouge">link</code> element in the head of your document and that you pasted the <code class="language-plaintext highlighter-rouge">font-family</code> styles into your CSS file correctly.</p>

<p>Homepage before:</p>

<p><img src="/assets/img/t5/step3-1.png" alt="homepage with default fonts" title="Step 3 before" /></p>

<p>Homepage after:</p>

<p><img src="/assets/img/t5/step3-2.png" alt="homepage with Google fonts" title="Step 3 after" /></p>

<h3 id="step-4-choose-adobe-fonts"><span id="step4">Step 4: Choose Adobe Fonts</span></h3>
<p>If you have a subscription to Creative Cloud, go through step four. If you don’t, the fonts available to you without a CC subscription are many of the same ones on Google so you aren’t going to find much difference here.</p>

<p>If you have a CC subscription, go to <a href="https://fonts.adobe.com/">fonts.adobe.com</a> and make sure your are signed in using your Adobe ID.</p>

<p><img src="/assets/img/t5/step4.png" alt="fonts.adobe.com homepage" title="Step 4" /></p>

<h4 id="step-4a-select-a-font-family">Step 4a: Select a Font Family</h4>
<p>There are also a lot of font families on Adobe Fonts. Take a minute to browse through and find one you want to use on your site. Like you did with the fonts on Google, look for a font that has more than 2 fonts in it. The number of fonts is next to the name of the font. For the Adobe font, choose the opposite of what you picked from Google. So if you picked a serif on Google, pick a sans-serif on Adobe. Choose something that will be easy to tell apart. Once you found the font family you want to use, click on the “View Family” button.</p>

<p><img src="/assets/img/t5/step4a.png" alt="a font family selected" title="Step 4a" /></p>

<h4 id="step-4b-add-to-web-project">Step 4b: Add to Web Project</h4>
<p>Click the “Add to Web Project” on the right.</p>

<p>In the pop up that appears, click the down arrow and create a new project. The name can be whatever you want, I’m calling mine “avt217”.</p>

<p><img src="/assets/img/t5/step4b1.png" alt="new project" title="Step 4b" /></p>

<p>Once you have the project created you can select the styles you want to use. I’m going to select the same thing I did before, Regular, Regular Italic, Bold, and Bold Italic.</p>

<p><img src="/assets/img/t5/step4b2.png" alt="styles selected" title="Step 4b" /></p>

<p>Once you have the styles you want checked, click the “Create” button.</p>

<h4 id="step-4c-get-code">Step 4c: Get Code</h4>
<p>After clicking the “Create” button the pop up will change to the code screen. This screen is very similar to the Google screen but has a little bit more detailed CSS.</p>

<p><img src="/assets/img/t5/step4c.png" alt="code options in adobe fonts" title="Step 4c" /></p>

<h4 id="step-4d-copy-link-and-paste-in-html-document">Step 4d: Copy Link and Paste in HTML Document</h4>
<p>Copy the <code class="language-plaintext highlighter-rouge">link</code> element code and paste it into the head of your <strong>index.html</strong> file.</p>

<p><img src="/assets/img/t5/step4d.png" alt="pasted link element in HTML" title="Step 4d" /></p>

<h4 id="step-4e-copy-css-and-paste-in-css-document">Step 4e: Copy CSS and Paste in CSS Document</h4>
<p>The CSS code is a little more detailed here than it was on Google. The difference being Adobe is giving you more than you might need and Google is assuming you know how to change the weight or style on your own. The main thing to copy here is the <code class="language-plaintext highlighter-rouge">font-family</code> declaration. Once you have that copied, go back to your CSS file and make a new style rule. Depending on where you added the Google font you selected, do the opposite with this one. So if you added the Google font to the heading elements, add this to the <code class="language-plaintext highlighter-rouge">li</code> elements. If you added the Google font to the <code class="language-plaintext highlighter-rouge">body</code> you can add this one to the heading elements or the <code class="language-plaintext highlighter-rouge">li</code> elements and it will override the <code class="language-plaintext highlighter-rouge">body</code> declaration.</p>

<p>I’m going to add it to my <code class="language-plaintext highlighter-rouge">h1</code> element. Because using <code class="language-plaintext highlighter-rouge">h1</code> as the selector is more specific than the <code class="language-plaintext highlighter-rouge">body</code> selector, this <code class="language-plaintext highlighter-rouge">font-family</code> will override the <code class="language-plaintext highlighter-rouge">font-family</code> for the <code class="language-plaintext highlighter-rouge">body</code>.</p>

<p><img src="/assets/img/t5/step4e.png" alt="adding font-family to h1" title="Step 4e" /></p>

<p>I’m also going to add a few extra styles to this page to make the type a little bigger, style the list and links a little, give it some margins so it isn’t smashed up against the edges of the browser window, and add a little color.</p>

<h3 id="step-5-save-and-preview-again"><span id="step5">Step 5: Save and Preview Again</span></h3>
<p>Make sure both your HTML and CSS files are saved and then preview your HTML file again. Hopefully the font on the page should change to the new font you selected. If it doesn’t, go back and make sure you pasted the whole <code class="language-plaintext highlighter-rouge">link</code> element in the head of your document and that you pasted the <code class="language-plaintext highlighter-rouge">font-family</code> styles into your CSS file correctly.</p>

<p><img src="/assets/img/t5/step5.png" alt="preview of page" title="Step 5" /></p>

<p>Look at the class repository to see the styles I used to get the page to look like that if you are interested.</p>

<p>Note: The two <code class="language-plaintext highlighter-rouge">link</code> elements that you pasted in the <code class="language-plaintext highlighter-rouge">head</code> of your HTML file need to exist in the <code class="language-plaintext highlighter-rouge">head</code> of every HTML file where you want to use those fonts.</p>]]></content><author><name>Michael McDermott</name></author><category term="tutorials" /><summary type="html"><![CDATA[How to bring fonts from Google or Adobe into your site.]]></summary></entry><entry><title type="html">Working with Images</title><link href="http://localhost:4000/tutorials/t4/" rel="alternate" type="text/html" title="Working with Images" /><published>2025-08-03T00:00:00-04:00</published><updated>2025-08-03T00:00:00-04:00</updated><id>http://localhost:4000/tutorials/t4</id><content type="html" xml:base="http://localhost:4000/tutorials/t4/"><![CDATA[<p>This tutorial will introduce the image element and how to use that element to get images to display on your pages. This tutorial will use Exercise 2 as the example for adding images.</p>

<h3 id="step-1-open-your-repository-in-atom"><span id="step1">Step 1: Open Your Repository in Atom</span></h3>
<p>Start with opening up the Github App and making sure you have your repository as the Current Repository and that the Current Branch is gh-pages. If those two pieces of information are correct, click the “Open in Atom” button in the middle of the screen.</p>

<p><img src="/assets/img/t4/step1a1.png" alt="main Github App window" title="Step 1a" /></p>

<p>This should open up Atom with a screen that looks something like the below.</p>

<p><img src="/assets/img/t4/step1a2.png" alt="repository opened in Atom" title="Step 1a" /></p>

<p>A few notes here. If you don’t see the project panel on the left of the window you can go to <span class="command"><em>View &gt; Toggle Tree View</em></span> to open it up. If you see files that start with a period, like <strong>.gitignore</strong> or <strong>.DS_Store</strong> you can ignore those. They are hidden files that you probably don’t see in your repository but show up in Atom. This view is also assuming you are looking at this tutorial after finishing Tutorial 2. If you have other files or folders in your repository this will look different.</p>

<h3 id="step-2-add-a-folder-html-file-and-images"><span id="step2">Step 2: Add a Folder, HTML File, and Images</span></h3>
<p>The nice thing about Atom is you can add folders and files right from the tree view in the left panel. If you right click in that panel you will see the pop out in the image below.</p>

<p><img src="/assets/img/t4/step2.png" alt="right clicking in the tree view" title="Step 2" /></p>

<h4 id="step-2a-add-the-exercise-2-folder">Step 2a: Add the Exercise 2 Folder</h4>
<p>In that pop out click the <span class="command"><em>New Folder</em></span> option and in the pop up that says “Enter the path for the new folder” type a folder name for your exercise 2 folder, <strong>e2</strong> is nice, short, and descriptive. Hit <span class="command"><em>Enter</em></span> to create the folder.</p>

<p><img src="/assets/img/t4/step2a.png" alt="adding a new folder in Atom" title="Step 2a" /></p>

<h4 id="step-2b-add-an-html-file">Step 2b: Add an HTML File</h4>
<p>Now right click on the folder you just created but this time select <span class="command"><em>New File</em></span>. Another pop up will appear that should already be filled with the folder name then a forward slash. If you don’t see that folder name you did not right click on the folder you just made. You want to add a new HTML file to this folder so what do you think it should be called? If you said <span class="spoiler">index.html</span> you are correct. Type the file name and then hit enter to create the file.</p>

<p><img src="/assets/img/t4/step2b1.png" alt="adding a new file in Atom" title="Step 2b" /></p>

<p>When you hit enter Atom should create the file and also open it so your tree view should have a new exercise 2 folder and an HTML file inside of that.</p>

<p><img src="/assets/img/t4/step2b2.png" alt="view of newly created folder and file in Atom" title="Step 2b" /></p>

<h4 id="step-2c-add-an-image-folder-and-images">Step 2c: Add an Image Folder and Images</h4>
<p>Once again right click on the Exercise 2 folder you created and add a new folder named <strong>images</strong>.</p>

<p><img src="/assets/img/t4/step2c1.png" alt="adding an images folder in Atom" title="Step 2c" /></p>

<p>Now that the images folder is created, add your images to that folder. You can do this a bunch of different ways but the easiest might be opening two windows with the files and dragging them from the old location to the new or copying from the old location and pasting to the new location. However you want to do it the goal is to get the 5 PNG files into the images folder.</p>

<p><img src="/assets/img/t4/step2c2.png" alt="adding png files to the images folder" title="Step 2c" /></p>

<h3 id="step-3-add-in-basic-html-setup"><span id="step3">Step 3: Add in Basic HTML Setup</span></h3>
<p>Your HTML file should still be open but if it isn’t make sure your HTML file in the Exercise 2 folder is open and add in the minimum HTML set up, give it a descriptive <code class="language-plaintext highlighter-rouge">title</code> and then save the file.</p>

<p><img src="/assets/img/t4/step3.png" alt="html file with minimum HTML" title="Step 3" /></p>

<h3 id="step-4-add-an-image"><span id="step4">Step 4: Add an Image</span></h3>

<p>To get images to display on your page you need to add the image element <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>. The image element needs two attributes, <code class="language-plaintext highlighter-rouge">src</code> and <code class="language-plaintext highlighter-rouge">alt</code>. The <code class="language-plaintext highlighter-rouge">src</code> attribute is where the path to the image file goes and the <code class="language-plaintext highlighter-rouge">alt</code> attribute holds text to display if the image link is broken or the user is using a screen reader. The image element is also an empty element so there is no content or closing tag.</p>

<p>In the <code class="language-plaintext highlighter-rouge">body</code> add an image element, <code class="language-plaintext highlighter-rouge">&lt;img src="#" alt="#"&gt;</code>. Make sure it is indented one level since it is a child of the <code class="language-plaintext highlighter-rouge">body</code>.</p>

<p><img src="/assets/img/t4/step4a1.png" alt="image element added in the body" title="Step 4" /></p>

<p>Now replace the two attributes with the appropriate values. <code class="language-plaintext highlighter-rouge">src</code> – <span class="spoiler">src=”images/1.png”</span>. <code class="language-plaintext highlighter-rouge">alt</code> - <span class="spoiler">alt=”shape layout 1”</span>. Once again the path in the <code class="language-plaintext highlighter-rouge">src</code> attribute is dependent on your folder and file naming. This path works for my file and folder naming, if yours is different the path needs to be different.</p>

<p><img src="/assets/img/t4/step4a2.png" alt="image element with attribute values added" title="Step 4" /></p>

<p>Before you add the other images it is worth saving the file and checking to see if everything is working in the browser. Once you have checked and verified that the image is displaying on the page, repeat this step four more times to add all of your images for Exercise 2 onto the page.</p>

<p><img src="/assets/img/t4/step4a3.png" alt="all five images added to the HTML file" title="Step 4" /></p>

<h3 id="step-5-link-to-exercise-2"><span id="step5">Step 5: Link to Exercise 2</span></h3>

<p>The last step is adding a link to your main page for Exercise 2. So open up your index.html file in your root directory and add in an anchor element, <code class="language-plaintext highlighter-rouge">&lt;a href="#"&gt;...&lt;/a&gt;</code> for Exercise 2. Make sure you are wrapping the text inside the list item for Exercise 2 and make sure you have an opening tag and closing tag. The value for the <code class="language-plaintext highlighter-rouge">href</code> attribute is dependent on your folder and file structure.</p>

<p><img src="/assets/img/t4/step5.png" alt="adding a link to e2 on the homepage" title="Step 5" /></p>

<p>Make sure both files are saved and preview the homepage and test to see if the link for Exercise 2 is working. If it is, great! You can open up the Github App and push the changes you just made. If it isn’t working, check to make sure all your syntax, spelling, and paths are correct and try it again. If it still isn’t working, ask for help.</p>]]></content><author><name>Michael McDermott</name></author><category term="tutorials" /><summary type="html"><![CDATA[Introduction to the image element and getting images to display on your page.]]></summary></entry><entry><title type="html">Your Homepage</title><link href="http://localhost:4000/tutorials/t3/" rel="alternate" type="text/html" title="Your Homepage" /><published>2025-08-02T00:00:00-04:00</published><updated>2025-08-02T00:00:00-04:00</updated><id>http://localhost:4000/tutorials/t3</id><content type="html" xml:base="http://localhost:4000/tutorials/t3/"><![CDATA[<p>This tutorial will get the homepage of your repository setup to be an archive of the work you are creating for this class.</p>

<h3 id="step-1-set-up-the-html-file"><span id="step1">Step 1: Set up the HTML file</span></h3>
<p>The first step is opening up your text editor, creating a new file, and saving it in the root directory of your repository as index.html. Once you have done that add in the basic HTML set up (steps 1 through 6 of <a href="/tutorials/t1">tutorial 1</a>). Make sure you make the text in the <code class="language-plaintext highlighter-rouge">title</code> element is something useful. At the end your file should look something like the image below.</p>

<p><img src="/assets/img/t3/step1.png" alt="basic html setup in Atom" title="Step 1" /></p>

<h3 id="step-2-adding-content"><span id="step2">Step 2: Adding Content</span></h3>
<p>Now that the file is set up you can add some content. This page is going to be a list of links to the work for the class. It should have some large text at the top to give the page a title and then a bunch of links underneath that. All of this content is going to go in the <code class="language-plaintext highlighter-rouge">body</code> element.</p>

<h4 id="step-2a-add-your-main-heading">Step 2a: Add your main heading</h4>
<p>Start with a title for your page using the <code class="language-plaintext highlighter-rouge">h1</code> element. Something like <code class="language-plaintext highlighter-rouge">&lt;h1&gt;Michael's Work&lt;/h1&gt;</code> or some other way to identify this page as yours.</p>

<p><img src="/assets/img/t3/step2a.png" alt="h1 element added to body" title="Step 2a" /></p>

<h4 id="step-2b-add-an-unordered-list">Step 2b: Add an Unordered List</h4>

<p>There are a lot of different ways to add links to a document. Since this going to be a list of links and we want to markup the document semantically, a list element makes sense. A list with numbers next to it isn’t important here so use an unordered list element, <code class="language-plaintext highlighter-rouge">&lt;ul&gt;...&lt;/ul&gt;</code>. Add the opening tag for the unordered list on the line beneath the <code class="language-plaintext highlighter-rouge">h1</code> element and the closing tag for the unordered list two lines beneath that. This leaves space to add a list item inside the unordered list. All of the elements inside the body element are at the same indent level so far.</p>

<p><img src="/assets/img/t3/step2b.png" alt="ul element added to the body" title="Step 2b" /></p>

<h4 id="step-2c-add-a-list-item">Step 2c: Add a List Item</h4>

<p>The text inside a list is all contained in the list item element, <code class="language-plaintext highlighter-rouge">&lt;li&gt;...&lt;/li&gt;</code>. On the line between the opening and closing tags for the unordered list, add a list item with some text that identifies this list item as Exercise 1, something like, “E1: 20 Questions”. Note that this <code class="language-plaintext highlighter-rouge">li</code> element is indented another level because it is a child of the <code class="language-plaintext highlighter-rouge">ul</code> element. Also a good time to save, <span class="command"><em>cmd+s</em></span>, if you haven’t yet.</p>

<p><img src="/assets/img/t3/step2c.png" alt="li element added inside the ul element" title="Step 2c" /></p>

<h4 id="step-2d-add-more-list-items">Step 2d: Add More List Items</h4>
<p>Add a new line beneath the <code class="language-plaintext highlighter-rouge">li</code> for E1 and make an <code class="language-plaintext highlighter-rouge">li</code> for E2. Repeat this process until you have list items for E1 through E5. All of these should be at the same level indent as the first <code class="language-plaintext highlighter-rouge">li</code> because they are all children of the <code class="language-plaintext highlighter-rouge">ul</code> element. Don’t forget to save.</p>

<p><img src="/assets/img/t3/step2d.png" alt="more li elements" title="Step 2d" /></p>

<h3 id="step-3-add-links"><span id="step3">Step 3: Add Links</span></h3>
<p>If you haven’t previewed the page yet you might want to. You should have something that looks like:</p>

<p><img src="/assets/img/t3/step3.png" alt="html file previewed in browser" title="Step 3" /></p>

<p>This works to show what the work is but the we can’t click on anything to take us to the work. To make that happen we need to add some anchor elements, <code class="language-plaintext highlighter-rouge">&lt;a&gt;...&lt;/a&gt;</code>.</p>

<h5 id="step-3a-wrap-list-item-text-in-an-anchor-element">Step 3a: Wrap List Item Text in an Anchor Element</h5>

<p>Put your cursor between the opening tag and the content for the first list item you have. That means the cursor should be after <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> and before “E1…”. Add the opening tag for the anchor element here. At the end of the text but before the closing tag for the list item add the closing tag for the anchor element.</p>

<p><img src="/assets/img/t3/step3a.png" alt="first list item wrapped in an anchor element" title="Step 3a" /></p>

<h5 id="step-3b-add-an-attribute">Step 3b: Add an Attribute</h5>

<p>Now there is one more part of an anchor element that needs to be added in order for the link to actually work. If you said the <code class="language-plaintext highlighter-rouge">href</code> attribute you are correct. In the opening tag for the anchor element but your cursor after the <code class="language-plaintext highlighter-rouge">a</code> and before the <code class="language-plaintext highlighter-rouge">&gt;</code>. Add a space and then type <code class="language-plaintext highlighter-rouge">href="#"</code>. The code should look like the first screenshot and if you preview the page the first list item should change to blue with an underline. If you click that link nothing will happen because it doesn’t have a path yet but it should look like the default link now.</p>

<p><img src="/assets/img/t3/step3b1.png" alt="first anchor element with href attribute" title="Step 3b1" />
<img src="/assets/img/t3/step3b2.png" alt="previewed page in browser showing link styles" title="Step 3b2" /></p>

<h3 id="step-4-add-e1-to-repository"><span id="step4">Step 4: Add E1 to Repository</span></h3>

<p>In order for the link to work, Exercise 1 needs to be added to your repository. The first thing you want to do is add a folder in your repository (root directory) where the E1 file will live. There are many ways to add a folder so do it however you are comfortable. Name the folder whatever you want remembering all the rules about naming folders and files, an easy name might be <strong>e1</strong>.</p>

<p><img src="/assets/img/t3/step4.png" alt="e1 folder in root directory" title="Step 4" /></p>

<p>Once you have the <strong>e1</strong> folder you can add your HTML file for Exercise 1 into it. Once you add the E1 file to the <strong>e1</strong> folder change the name of it to <strong>index.html</strong>.</p>

<h3 id="step-5-add-the-link-path"><span id="step5">Step 5: Add the Link Path</span></h3>

<p>Now that the Exercise 1 file is in the repository you can add the path to the E1 link on your homepage. You should be back in Atom looking at your <strong>index.html</strong> file that is in your root directory. That should be the file that has the list of exercises we added earlier.</p>

<p>Find the anchor element wrapped around “E1: 20 Questions”. Delete the “#” we added when we first wrote the <code class="language-plaintext highlighter-rouge">href</code> attribute and change it to the correct path to get to your Exercise 1 file. Take a second to try and write it yourself and once you have something highlight the box to see what the path should be <span class="spoiler">e1/index.html</span>.</p>

<p>A note: This path is dependent on the file and folder names this tutorial uses and the location of those files and folders. If you named something differently or put something in a different location, your path will be different than the one above.</p>

<p>Once you have the path filled in preview the page in your browser and test out the link. Did it take you to your E1 file? If it did, great! If it didn’t, check to make sure your spelling is correct, capitalization, etc. and see if you can fix the error.</p>

<p><img src="/assets/img/t3/step5.png" alt="href value filled in for first anchor element" title="Step 5" /></p>

<p>This is the same process to add links to the other list items in your unordered list. Once you have completed them, add a folder to the repository and then add any files you need displayed in there.</p>

<h3 id="step-6-add-css"><span id="step6">Step 6: Add CSS</span></h3>
<p>The page works but it doesn’t look very good. How can you make it look better? CSS! In your repository add a <strong>css</strong> folder. Once you have the folder make a new file in Atom and save it in your newly created <strong>css</strong> folder as <strong>main.css</strong>. This file will now allow you to control the look of your repository’s homepage. If you need a reminder on how CSS works make sure you have another look at the 2.3: External Style Sheets PDF on Blackboard.</p>

<h4 id="step-6a-add-styles">Step 6a: Add Styles</h4>
<p>On line one of the newly created CSS file add a selector for something you want to style. In this case, style the <code class="language-plaintext highlighter-rouge">body</code> element and type <code class="language-plaintext highlighter-rouge">body {</code> on line 1 and then close the style on line 3 with a closing curly bracket, <code class="language-plaintext highlighter-rouge">}</code>.</p>

<p><img src="/assets/img/t3/step6a1.png" alt="body style in CSS" title="Step 6a1" /></p>

<p>Now add a declation in there (<code class="language-plaintext highlighter-rouge">property: value;</code>) to change the <code class="language-plaintext highlighter-rouge">background-color</code> for the <code class="language-plaintext highlighter-rouge">body</code>. This allows a quick, easy check to see if the CSS file is correctly linked to the HTML file. Add the property <code class="language-plaintext highlighter-rouge">background-color</code> with the value of <code class="language-plaintext highlighter-rouge">yellow</code> to line two of the CSS file. Make sure it is indented one level because this declaration is inside the <code class="language-plaintext highlighter-rouge">body</code> style rule.</p>

<p><img src="/assets/img/t3/step6a2.png" alt="changing the background color of the body in CSS" title="Step 6a2" /></p>

<p>Save the CSS file and preview your main HTML file again. Did anything change? No? Any ideas why? If you guessed that the CSS file isn’t connected to the HTML file yet you would be correct!</p>

<h4 id="step-6b-connect-css-and-html-files">Step 6b: Connect CSS and HTML Files</h4>

<p>To connect the two files together you need to add the <code class="language-plaintext highlighter-rouge">link</code> element to the HTML file. The <code class="language-plaintext highlighter-rouge">link</code> element is an empty element that goes in the <code class="language-plaintext highlighter-rouge">head</code> of the HTML document and must have two attributes, <code class="language-plaintext highlighter-rouge">rel</code> and <code class="language-plaintext highlighter-rouge">href</code>.</p>

<p>Open up your main <strong>index.html</strong> file and add a new line beneath your <code class="language-plaintext highlighter-rouge">title</code> element. On that line add the link element, <code class="language-plaintext highlighter-rouge">&lt;link rel="#" href="#"&gt;</code>. Try and replace the “#” with the appropriate values for each attribute. The <code class="language-plaintext highlighter-rouge">rel</code> value should define the documents relationship and the <code class="language-plaintext highlighter-rouge">href</code> value should be the path to your css file. <code class="language-plaintext highlighter-rouge">rel</code> attribute – <span class="spoiler">rel=”stylesheet”</span>, <code class="language-plaintext highlighter-rouge">href</code> attribute – <span class="spoiler">href=”css/main.css”</span>.</p>

<p>Another note: Again this path is for the file and folder names and locations of this tutorial. If you did something different, that path will not work.</p>

<p>Once you have the values, preview the HTML page and see if the background turned yellow. If it turned yellow that means your files are connected and you can add more styles to your CSS file to control the look of your homepage. If it didn’t turn yellow try going back through and comparing your files to the screenshots and see if you can find the issue.</p>

<p><img src="/assets/img/t3/step6b1.png" alt="adding the link element to the head of the HTML document" title="Step 6b1" />
<img src="/assets/img/t3/step6b2.png" alt="broswer preview of HTML page showing CSS changes" title="Step 6b2" /></p>

<h3 id="step-7-go-crazy"><span id="step7">Step 7: Go Crazy</span></h3>
<p>Now that you have a CSS file that is connected to your HTML file you can add all the styles you want. Just remember that in order to style an element in your HTML you need to target that element with the same selector. So if you want to style the list items in your HTML file, the CSS selector is going to be <code class="language-plaintext highlighter-rouge">li</code>. If you want to style the level 1 heading, the CSS selector is going to be <code class="language-plaintext highlighter-rouge">h1</code>. This allows you to style any HTML element that displays on the page (meaning you can’t style the <code class="language-plaintext highlighter-rouge">title</code> element).</p>

<p>If you run into something that you don’t know how to change, try Googling it as if you were asking me. “How do I change the font size in CSS?” or “How do I change the color of text HTML” or “How do I change the hover color of my links CSS?”</p>]]></content><author><name>Michael McDermott</name></author><category term="tutorials" /><summary type="html"><![CDATA[Getting the homepage of your repository setup.]]></summary></entry><entry><title type="html">ethan</title><link href="http://localhost:4000/student/ethan/" rel="alternate" type="text/html" title="ethan" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>http://localhost:4000/student/ethan</id><content type="html" xml:base="http://localhost:4000/student/ethan/"><![CDATA[]]></content><author><name>Michael McDermott</name></author><category term="student" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">eugene</title><link href="http://localhost:4000/student/eugene/" rel="alternate" type="text/html" title="eugene" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>http://localhost:4000/student/eugene</id><content type="html" xml:base="http://localhost:4000/student/eugene/"><![CDATA[]]></content><author><name>Michael McDermott</name></author><category term="student" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">herb</title><link href="http://localhost:4000/student/herb/" rel="alternate" type="text/html" title="herb" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>http://localhost:4000/student/herb</id><content type="html" xml:base="http://localhost:4000/student/herb/"><![CDATA[]]></content><author><name>Michael McDermott</name></author><category term="student" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">isha</title><link href="http://localhost:4000/student/isha/" rel="alternate" type="text/html" title="isha" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>http://localhost:4000/student/isha</id><content type="html" xml:base="http://localhost:4000/student/isha/"><![CDATA[]]></content><author><name>Michael McDermott</name></author><category term="student" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">jessie</title><link href="http://localhost:4000/student/jessie/" rel="alternate" type="text/html" title="jessie" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>http://localhost:4000/student/jessie</id><content type="html" xml:base="http://localhost:4000/student/jessie/"><![CDATA[]]></content><author><name>Michael McDermott</name></author><category term="student" /><summary type="html"><![CDATA[]]></summary></entry></feed>